{
  "Add a layer from a portal item": {
    "body": [
      "Layer.fromPortalItem({",
      "\tportalItem: {",
      "\t\tid: \"${1:af1ad38816814b7eba3fe74a3b84412d}\"",
      "\t}",
      "}).then(function(layer) {",
      "\t\tmap.add(layer);",
      "});"
    ],
    "description": "Add a new layer to the map using a portal item id. Contains a placeholder for the portal item id. AMD path: esri/layers/Layer | ESM path: @arcgis/core/layers/Layer.js",
    "prefix": "addLayerFromPortalItem"
  },
  "Add a Circle Geometry": {
    "body": [
      "new Circle({",
      "\tcenter: [-113, 36],",
      "\tgeodesic: true,",
      "\tnumberOfPoints: 100,",
      "\tradius: 100,",
      "\tradiusUnit: \"kilometers\"",
      "});"
    ],
    "description": "A circle is a Polygon created by specifying a center point and a radius. The point can be provided as a Point object or an array of latitude/longitude values.",
    "prefix": "CircleGeometry"
  },
  "Add a Extent Geometry": {
    "body": [
      "new Extent({",
      "\tmmin: -462,",
      "\tmmax: 130,",
      "\txmin: -462,",
      "\txmax: 130",
      "});"
    ],
    "description": "Extent is used to describe the visible portion of a MapView.",
    "prefix": "ExtentGeometry"
  },
  "Add a Mesh Geometry": {
    "body": [
      "new Mesh({",
      "\tvertexAttributes: vertexAttributes,",
      "\thasZ: false,",
      "\thasM: true,",
      "});"
    ],
    "description": "A mesh is a general, client-side 3D geometry type composed of vertices with attributes. The mesh geometry class has a number of convenience functions to create simple primitive shapes. Mesh geometries can be manually created by specifying vertexAttributes and components.",
    "prefix": "MeshGeometry"
  },
  "Add a Multipoint Geometry": {
    "body": [
      "new Multipoint(",
      "\tnew SpatialReference(",
      "\t\t{ wkid:4326 })",
      ");"
    ],
    "description": "An ordered collection of points.",
    "prefix": "MultipointGeometry"
  },
  "Add a Point Geometry": {
    "body": [
      "new Point({",
      "\tx: -107.875,",
      "\ty: 37.875,",
      "\tz: 0,",
      "\tspatialReference",
      "});"
    ],
    "description": "A location defined by X, Y, and Z coordinates.",
    "prefix": "PointGeometry"
  },
  "Add a Polyline Geometry": {
    "body": [
      "new Polyline({",
      "\thasZ: false,",
      "\thasM: true,",
      "\tpaths: paths,",
      "\tspatialReference: { wkid: 4326 }",
      "});"
    ],
    "description": "A polyline contains an array of paths and spatialReference. Each path is represented as an array of points.",
    "prefix": "PolylineGeometry"
  },
  "Add a Polygon Geometry": {
    "body": [
      "new Polygon({",
      "\thasZ: true,",
      "\thasM: true,",
      "\trings: rings,",
      "\tspatialReference: { wkid: 4326 }",
      "});"
    ],
    "description": "A polygon contains an array of rings and a spatialReference. Each ring is represented as an array of points. The first and last points of a ring must be the same.",
    "prefix": "PolygonGeometry"
  },
  "Add a SpatialReference Geometry": {
    "body": [
      "new SpatialReference({",
      "\twkid: 4326,",
      "\tunit: \"150-kilometers\"",
      "});"
    ],
    "description": "Defines the spatial reference of a view, layer, or method parameters.",
    "prefix": "SpatialReferenceGeometry"
  },
  "Add a Search Widget": {
    "body": [
      "new Search({",
      "\tincludeDefaultSources: false,",
      "\tmaxResults: 6,",
      "\tpopupEnabled: true,",
      "\tsources: [...],",
      "\tview: view,",
      "});"
    ],
    "description": "The Search widget provides a way to perform search operations on services or features provided by Esri",
    "prefix": "searchWidget"
  },
  "Add a Search Widget with Custom Sources": {
    "body": [
      "new SearchSource({",
      "\tplaceholder: \"example: 8 Boulevard du Port\",",
      "\tgetSuggestions: (params) => {",
      "\t\t\treturn esriRequest(url + \"search/\", {",
      "\t\t\t\tquery: {",
      "\t\t\t\t\tlat: view.center.latitude,",
      "\t\t\t\t\tlon: view.center.longitude,",
      "\t\t\t\t\tlimit: 6,",
      "\t\t\t\t\tq: params.suggestTerm.replace(/ /g, \"+\")",
      "\t\t\t\t},",
      "\t\t\t\tresponseType: \"json\"",
      "\t\t\t}).then((results) => {",
      "\t\t\t\treturn results.data.features.map((feature) => {",
      "\t\t\t\t\treturn {",
      "\t\t\t\t\t\tkey: \"name\",",
      "\t\t\t\t\t\tsourceIndex: params.sourceIndex,",
      "\t\t\t\t\t\ttext: feature.properties.label",
      "\t\t\t\t\t};",
      "\t\t\t\t});",
      "\t\t\t});",
      "\t\t},",
      "\t\tgetResults: (params) => {",
      "\t\t\tconst operation = params.location ? \"reverse/\" : \"search/\";",
      "\t\t\tlet query = {};",
      "\t\t\tif (params.location) {",
      "\t\t\t\tquery.lat = params.location.latitude;",
      "\t\t\t\tquery.lon = params.location.longitude;",
      "\t\t\t} else {",
      "\t\t\t\tquery.q = params.suggestResult.text.replace(/ /g, \"+\");",
      "\t\t\t\tquery.limit = 6;",
      "\t\t\t}",
      "\t\t\treturn esriRequest(url + operation, {",
      "\t\t\t\tquery: query,",
      "\t\t\t\tresponseType: \"json\"",
      "\t\t\t}).then((results) => {",
      "\t\t\t\tconst searchResults = results.data.features.map((feature) => {",
      "\t\t\t\t\tconst graphic = new Graphic({",
      "\t\t\t\t\t\tgeometry: new Point({",
      "\t\t\t\t\t\t\tx: feature.geometry.coordinates[0],",
      "\t\t\t\t\t\t\ty: feature.geometry.coordinates[1]",
      "\t\t\t\t\t\t}),",
      "\t\t\t\t\t\tattributes: feature.properties",
      "\t\t\t\t\t});",
      "\t\t\t\t\tconst buffer = geometryEngine.geodesicBuffer(graphic.geometry, 100, \"meters\");",
      "\t\t\t\t\tconst searchResult = {",
      "\t\t\t\t\t\textent: buffer.extent,",
      "\t\t\t\t\t\tfeature: graphic,",
      "\t\t\t\t\t\tname: feature.properties.label",
      "\t\t\t\t\t};",
      "\t\t\t\t\treturn searchResult;",
      "\t\t\t\t});",
      "\t\t\t\t",
      "\t\t\t\treturn searchResults;",
      "\t\t\t});",
      "\t\t}",
      "});"
    ],
    "description": "The search widget provides the capability to provide search capabilities to third-party services. To use a custom source with the search widget, you must set the widget's sources property with your own custom source. To create a custom search source, you need to construct a search source with on object containing two functions, getSuggestions and getResults.",
    "prefix": "searchWidgetWithCustomSources"
  },
  "Add a Search Widget with Multiple Sources": {
    "body": [
      "new Search({",
      "\tallPlaceholder: \"District or Senator\",",
      "\tincludeDefaultSources: false,",
      "\tsources: [",
      "\t\t{",
      "\t\t\texactMatch: false,",
      "\t\t\tlayer: featureLayerSenators,",
      "\t\t\tname: \"Senators\",",
      "\t\t\toutFields: [\"*\"],",
      "\t\t\tplaceholder: \"example: Casey\",",
      "\t\t\tresultSymbol: {",
      "\t\t\t\theight: 36,",
      "\t\t\t\ttype: \"picture-marker\",",
      "\t\t\t\turl: \"https://developers.arcgis.com/javascript/latest//sample-code/widgets-search-multiplesource/live/images/senate.png\",",
      "\t\t\t\twidth: 36",
      "\t\t\t},",
      "\t\t\tsearchFields: [\"Name\", \"Party\"],",
      "\t\t\tsuggestionTemplate: \"{Name}, Party: {Party}\",",
      "\t\t\tzoomScale: 500000",
      "\t\t},",
      "\t\t{",
      "\t\t\tapiKey: \"YOUR API KEY\",",
      "\t\t\tname: \"ArcGIS World Geocoding Service\",",
      "\t\t\tplaceholder: \"example: Nuuk, GRL\",",
      "\t\t\tsingleLineFieldName: \"SingleLine\",",
      "\t\t\turl: \"https://geocode-api.arcgis.com/arcgis/rest/services/World/GeocodeServer\"",
      "\t\t}",
      "\t],",
      "\tview: view",
      "});"
    ],
    "description": "The Search widget to search multiple Layer Sources based on given fields. To use multiple sources with the Search widget, you must set the widget's sources property.",
    "prefix": "searchWidgetWithSources"
  },
  "Add ArcGIS JS SDK require": {
    "body": [
      "require([",
      "\t\"esri/Map\",",
      "\t\"esri/views/MapView\"",
      "], function(",
      "\tMap,",
      "\tMapView",
      "){",
      "\t",
      "});"
    ],
    "description": "Load the Map and MapView modules using require.",
    "prefix": "require"
  },
  "Add ArcGIS JS SDK require (API keys)": {
    "body": [
      "require([",
      "\t\"esri/config\",",
      "\t\"esri/Map\",",
      "\t\"esri/views/MapView\"",
      "], function(",
      "\tesriConfig,",
      "\tMap,",
      "\tMapView",
      "){",
      "\tesriConfig = \"${1:YOUR_API_KEY}\";",
      "});"
    ],
    "description": "Load the config, Map and MapView modules using require",
    "prefix": "requireApiKeys"
  },
  "Add edges to 3D symbols": {
    "body": [
      "{",
      "\ttype: \"${1|solid,sketch|}\",",
      "\tcolor: ${2:[50, 50, 50, 0.5]},",
      "\tsize: ${3:1},",
      "\textensionLength: ${4:0}",
      "}"
    ],
    "description": "Add edge rendering visualization to existing symbols. Can only be applied to \"edges\" property of FillSymbol3DLayer on MeshSymbol3D or ExtrudeSymbol3DLayer on PolygonSymbol3D.",
    "prefix": "edges3DProps"
  },
  "City scale 3D callout": {
    "body": [
      "{",
      "\tborder: {",
      "\t\tcolor: ${1:[0, 0, 0, 0.5]},",
      "\t},",
      "\tcolor: ${2:[255, 255, 255, 0.9]},",
      "\tsize: ${3:1.5},",
      "\ttype: \"line\",",
      "},",
      "verticalOffset: {",
      "\tmaxWorldLength: 200,",
      "\tminWorldLength: 20,",
      "\tscreenLength: 20,",
      "}"
    ],
    "description": "Generates a Callout3D with a verticalOffset for a city scale level and the callout property. They should be set on the property \"callout\" of PointSymbol3D or LabelSymbol3D.",
    "prefix": [
      "callout3DSmallProps"
    ]
  },
  "Create 2D MapView from a portalItem": {
    "body": [
      "new MapView({",
      "\tcontainer: \"${1:viewDiv}\",",
      "\tmap: new WebMap({",
      "\t\tportalItem: {",
      "\t\t\tid: \"${2:webmap_id}\"",
      "\t\t}",
      "\t})",
      "});"
    ],
    "description": "Create 2D map using a WebMap and a portalItem. AMD paths: esri/views/MapView & esri/WebMap | ESM paths: @arcgis/core/views/MapView.js & @arcgis/core/WebMap.js",
    "prefix": [
      "MapViewWebMap"
    ]
  },
  "Create 3D map from a portalItem": {
    "body": [
      "new SceneView({",
      "\tcontainer: \"${1:viewDiv}\",",
      "\tmap: new WebScene({",
      "\t\tportalItem: {",
      "\t\t\tid: \"${2:webscene_id}\"",
      "\t\t}",
      "\t})",
      "});"
    ],
    "description": "Create 3D map using a WebScene and a portalItem. AMD paths: esri/views/SceneView & esri/WebScene | ESM Paths: @arcgis/core/views/SceneView.js & @arcgis/core/WebScene.js",
    "prefix": [
      "SceneViewWebScene"
    ]
  },
  "Create basic 2D map": {
    "body": [
      "new MapView({",
      "\tcontainer: ${1:\"viewDiv\"},",
      "\tmap: {",
      "\t  basemap: \"${2|arcgis-imagery,arcgis-imagery-standard,arcgis-imagery-labels,arcgis-light-gray,arcgis-dark-gray,arcgis-navigation,arcgis-navigation-night,arcgis-streets,arcgis-streets-night,arcgis-streets-relief,arcgis-topographic,arcgis-oceans,osm-standard,osm-standard-relief,osm-streets,osm-streets-relief,osm-light-gray,osm-dark-gray,arcgis-terrain,arcgis-community,arcgis-charted-territory,arcgis-colored-pencil,arcgis-nova,arcgis-modern-antique,arcgis-midcentury,arcgis-newspaper,arcgis-hillshade-light,arcgis-hillshade-dark|}\"",
      "\t},",
      "\tzoom: ${3:4},",
      "\tcenter: ${4:[15, 65]}",
      "});"
    ],
    "description": "Create 2D MapView using a Map. AMD path: esri/views/MapView | ESM path: @arcgis/core/views/MapView.js",
    "prefix": [
      "MapViewMap"
    ]
  },
  "Create basic 3D map": {
    "body": [
      "new SceneView({",
      "\tcontainer: \"${1:viewDiv}\",",
      "\tmap: {",
      "\t\tbasemap: \"${2:streets}\"",
      "\t}",
      "});"
    ],
    "description": "Create 3D SceneView using a Map. AMD path: esri/views/SceneView | ESM path: @arcgis/core/views/SceneView.js",
    "prefix": [
      "SceneViewMap"
    ]
  },
  "Create object point 3D": {
    "body": [
      "{",
      "\ttype: \"point-3d\",",
      "\tsymbolLayers: [{",
      "\t\ttype: \"object\",",
      "\t\tresource: { primitive: \"${1|sphere,cylinder,cube,cone,inverted-cone,diamond,tetrahedron|}\"},",
      "\t\tmaterial: { color: ${2:[255, 250, 239, 0.8]} },",
      "\t\tdepth: ${3:15},",
      "\t\theight: ${4:20},",
      "\t\twidth: ${5:5}",
      "\t}]",
      "}"
    ],
    "description": "Generate PointSymbol3D with a ObjectSymbol3DLayer",
    "prefix": "pointSymbol3dProps"
  },
  "Create Picture marker symbol": {
    "body": [
      "{",
      "\ttype: \"picture-marker\",",
      "\turl: \"image-url\",",
      "\theight: 12,",
      "\twidth: 12",
      "}"
    ],
    "description": "Create a PictureMarkerSymbol, allowing custom image-based markers for points on maps",
    "prefix": "pictureMarkerSymbolProps"
  },
  "Feature reduction cluster properties": {
    "body": [
      "{",
      "\tclusterMaxSize: 37.5,",
      "\tclusterMinSize: 16.5,",
      "\tclusterRadius: 60,",
      "\tlabelingInfo: [{",
      "\t\tdeconflictionStrategy: \"none\",",
      "\t\tlabelExpressionInfo: {",
      "\t\t\texpression: `",
      "\t\t\t\t\\$feature[\"cluster_count\"];",
      "\t\t\t\tconst value = \\$feature[\"cluster_count\"];",
      "\t\t\t\tconst num = Count(Text(Round(value)));",
      "\t\t\t\tconst label = When(",
      "\t\t\t\t\tnum < 4, Text(value, \"#.#\"),",
      "\t\t\t\t\tnum == 4, Text(value / Pow(10, 3), \"#.0k\"),",
      "\t\t\t\t\tnum <= 6, Text(value / Pow(10, 3), \"#k\"),",
      "\t\t\t\t\tnum == 7, Text(value / Pow(10, 6), \"#.0m\"),",
      "\t\t\t\t\tnum > 7, Text(value / Pow(10, 6), \"#m\"),",
      "\t\t\t\t\tText(value, \"#,###\")",
      "\t\t\t\t);",
      "\t\t\t\treturn label;",
      "\t\t\t`",
      "\t\t},",
      "\t\tsymbol: {",
      "\t\t\tcolor: \"rgba(240,240,240,1)\",",
      "\t\t\tfont: {",
      "\t\t\t\tfamily: \"Noto Sans\",",
      "\t\t\t\tsize: \"12px\",",
      "\t\t\t\tweight: \"bold\"",
      "\t\t\t},",
      "\t\t\thaloColor: \"rgba(55,56,55,1)\",",
      "\t\t\thaloSize: 0.75,",
      "\t\t\ttype: \"text\"",
      "\t\t},",
      "\t\tlabelPlacement: \"center-center\"",
      "\t}],",
      "\tlabelsVisible: true,",
      "\tpopupEnabled: true,",
      "\tpopupTemplate: {",
      "\t\tcontent: \"This cluster represents <b>{cluster_count}</b> features.\",",
      "\t\tfieldInfos: [{",
      "\t\t\tfieldName: \"cluster_count\",",
      "\t\t\tformat: {",
      "\t\t\t\tdigitSeparator: true,",
      "\t\t\t\tplaces: 0",
      "\t\t\t},",
      "\t\t\tlabel: \"Number of features\"",
      "\t\t],",
      "\t\ttitle: \"Cluster summary\"",
      "\t},",
      "\ttype: \"cluster\",",
      "}"
    ],
    "description": "Generates the configuration for clustering in a MapView. This should be set on layers containing point geometry. This snippet is usually used to set the property \"featureReduction\" of a FeatureLayer, CSVLayer, GeoJSONLayer, WFSLayer, or OGCFeatureLayer",
    "prefix": [
      "featureReductionClusterProps",
      "clusterConfig"
    ]
  },
  "Find a layer by it's name": {
    "body": [
      "view.map.layers.find( l => l.title === \"${1:LayerTitle}\" );"
    ],
    "description": "Find a layer in the MapView by it's title",
    "prefix": "findLayer"
  },
  "Generate a DotDensity renderer": {
    "body": [
      "{",
      "\ttype: 'dot-density',",
      "\tdotValue: ${1:initialValue},",
      "\toutline: null,",
      "\tlegendOptions: {",
      "\t\tunit: \"${2:unitDot}\"",
      "\t},",
      "\tattributes: [",
      "\t\t{",
      "\t\t\tfield: \"${3:field_1}\",",
      "\t\t\tcolor: \"${4:color_1}\",",
      "\t\t\tlabel: \"${5:label_1}\"",
      "\t\t},",
      "\t\t{",
      "\t\t\tfield: \"${6:field_2}\",",
      "\t\t\tcolor: \"${7:color_2}\",",
      "\t\t\tlabel: \"${8:label_2}\"",
      "\t\t}",
      "\t]",
      "}"
    ],
    "description": "Generate a DotDensity Renderer",
    "prefix": "dotDensityRendererProps"
  },
  "Generate fill polygon 3D": {
    "body": [
      "{",
      "\ttype: \"polygon-3d\",",
      "\tsymbolLayers: [{",
      "\t\ttype: \"fill\",",
      "\t\tpattern: {",
      "\t\t\ttype: \"style\",",
      "\t\t\tstyle: \"${1|solid,vertical,horizontal,forward-diagonal,diagonal-cross,cross,backward-diagonal|}\"",
      "\t\t},",
      "\t\tmaterial: { color: ${2:[255, 250, 239, 0.8]} },",
      "\t\toutline: { color: ${3:[70, 70, 70, 0.7]}}",
      "\t}]",
      "}"
    ],
    "description": "Generate PolygonSymbol3D with a FillSymbol3DLayer",
    "prefix": "fillPolygon3d"
  },
  "How features are placed on the vertical axis (z)": {
    "body": [
      "{",
      "\tmode: \"${1|on-the-ground,relative-to-ground,absolute-height,relative-to-scene|}\",",
      "\toffset: ${2:10},",
      "\tfeatureExpressionInfo: {",
      "\t\texpression: \"${3:Geometry(\\$feature).z\"}",
      "\t},",
      "\tunit: \"${4|feet,meters,kilometers,miles,us-feet,yards|}\"",
      "}"
    ],
    "description": "Specifies how features are placed on the vertical axis (z). This snippets should be used to set the property \"elevationInfo\" of a FeatureLayer, CSVLayer, WFSLayer, SceneLayer, StreamLayer, GeoJSONLayer, IntegratedMeshLayer, etc.",
    "prefix": "elevationInfoProps"
  },
  "LabelingInfo for labels in a MapView": {
    "body": [
      "new LabelClass({",
      "\tlabelExpressionInfo: { expression: \"${1:\\$feature.NAME}\"},",
      "\tsymbol: {",
      "\t\ttype: \"text\",",
      "\t\tcolor: ${2:[0, 0, 0, 0.5]},",
      "\t\thaloSize: ${3:1},",
      "\t\thaloColor: ${4:[255, 255, 255, 0.9]}",
      "\t}",
      "})"
    ],
    "description": "Creates the labelingInfo for labels in a layer for 2D maps. It in normally used in the property \"labelingInfo[]\" of a FeatureLayer, CSVLayer, GeoJSONLayer, StreamLayer, OGCFeatureLayer, or WFSLayer in 2D MapViews. AMD path: esri/layers/support/LabelClass | ESM path: @arcgis/core/layers/support/LabelClass.js",
    "prefix": [
      "LabelClass2D",
      "labeling2d"
    ]
  },
  "LabelingInfo for labels in a SceneView": {
    "body": [
      "new LabelClass({",
      "\tlabelExpressionInfo: { expression: \"${1:\\$feature.NAME}\"},",
      "\tsymbol: {",
      "\t\ttype: \"label-3d\",",
      "\t\tsymbolLayers: [{",
      "\t\t\ttype: \"text\",",
      "\t\t\tmaterial: {",
      "\t\t\t\tcolor: ${2:[0, 0, 0, 0.5]}",
      "\t\t\t},",
      "\t\t\thalo: {",
      "\t\t\t\tsize: ${3: 1},",
      "\t\t\t\tcolor: ${4:[255, 255, 255, 0.9]}",
      "\t\t\t},",
      "\t\t\tfont: {",
      "\t\t\t\tsize: ${5: 11},",
      "\t\t\t\tfamily: ${6:\"sans-serif\"}",
      "\t\t\t}",
      "\t\t}]",
      "\t}",
      "})"
    ],
    "description": "Creates the labelingInfo for labels in a layer for 3D maps. It is normally used in the property \"labelingInfo[]\" of a FeatureLayer, SceneLayer or any layyer with that property within a SceneView. AMD path: esri/layers/support/LabelClass | ESM path: @arcgis/core/layers/support/LabelClass.js",
    "prefix": [
      "LabelClass3D",
      "labeling3d"
    ]
  },
  "Render 2D points with a shape & color": {
    "body": [
      "{",
      "\ttype: \"simple-marker\",",
      "\tcolor: [255, 255, 255, 0.25],",
      "\tsize: 12,",
      "\tstyle: \"${1|circle,square,cross,x,diamond,triangle,path|}\",",
      "\toutline: {",
      "\t\twidth: 1,",
      "\t\tcolor: [255, 255, 255, 1]",
      "\t}",
      "}"
    ],
    "description": "Create a SimpleMarkerSymbol for rendering 2D Point geometries with a simple shape and color in either a MapView or a SceneView, but for 3D it is recommended to use PointSymbol3D. This snippet is usually used to set the property \"symbol\" of renderers or individual graphics.",
    "prefix": [
      "simpleMarkerSymbolProps"
    ]
  },
  "Render 2D polygons geometries": {
    "body": [
      "{",
      "\ttype: \"simple-fill\",",
      "\tcolor: [0, 0, 0, 0.25],",
      "\tstyle: \"${1|solid,backward-diagonal,cross,diagonal-cross,forward-diagonal,horizontal,none,vertical|}\",",
      "\toutline: {",
      "\t\twidth: 1,",
      "\t\tcolor: [255, 255, 255, 1]",
      "\t}",
      "}"
    ],
    "description": "Create a SimpleFillSymbol for rendering 2D polygon geometries in a 2D or 3D view, but for 3D it is recommended to use PolygonSymbol3D. It can be filled with a solid color, or a pattern. This snippet is usually used to set the property \"symbol\" of renderers or individual graphics.",
    "prefix": "simpleFillSymbolProps"
  },
  "Render 2D polyline geometries": {
    "body": [
      "{",
      "\ttype: \"simple-line\",",
      "\twidth: 1,",
      "\tcolor: [255, 255, 255, 1],",
      "\tstyle: \"${1|solid,none,dash,dash-dot,dot,long-dash,long-dash-dot,long-dash-dot-dot,short-dash,short-dash-dot,short-dash-dot-dot,short-dot|}\",",
      "\tcap: \"${2|round,butt,square|}\",",
      "\tjoin: \"${3|round,miter,bevel|}\"",
      "}"
    ],
    "description": "Create a SimpleLineSymbol for rendering 2D polyline geometries in a 2D or 3D view, but for 3D it is recommended to use LineSymbol3D. It can be used in several properties like \"symbol\" of renderers or individual graphics, but also \"outline\" of marker and fill symbols.",
    "prefix": [
      "simpleLineSymbolProps"
    ]
  },
  "Render 3D mesh polygon features in a 3D": {
    "body": [
      "{",
      "\ttype: \"mesh-3d\",",
      "\tsymbolLayers: [{",
      "\t\ttype: \"fill\",",
      "\t\tmaterial: { color: ${1:[255, 250, 239, 0.8]} },",
      "\t}]",
      "}"
    ],
    "description": "Generate MeshSymbol3D with a FillSymbol3DLayer in a SceneLayer in a SceneView. This snippet is usually used to set the property \"symbol\" of renderers or individual graphics.",
    "prefix": [
      "fillMesh3dProps",
      "meshSymbol3DProps"
    ]
  },
  "Render all features with one symbol": {
    "body": [
      "{",
      "\ttype: \"simple\",",
      "\tsymbol: ${1:symbol}",
      "}"
    ],
    "description": "Renders all features in a Layer with one Symbol. This snippet is usually used to set the property \"renderer\" of a FeatureLayer, SceneLayer, MapImageLayer, CSVLayer, GeoJSONLayer, OGCFeatureLayer, WFSLayer, or StreamLayer.",
    "prefix": [
      "simpleRendererProps"
    ]
  },
  "Render an image in a repeating pattern (2D)": {
    "body": [
      "{",
      "\ttype: \"picture-fill\",",
      "\turl: \"${1:image-url}\",",
      "\twidth: 12,",
      "\theight: 12,",
      "\txoffset: 0,",
      "\tyoffset: 0",
      "}"
    ],
    "description": "PictureFillSymbol uses an image in a repeating pattern to symbolize polygon features in a 2D MapView. patterns for polygons. This snippet is usually used to set the property \"symbol\" of renderers or individual graphics.",
    "prefix": "pictureFillSymbolProps"
  },
  "Render points using a flat 2D icon": {
    "body": [
      "{",
      "\ttype: \"point-3d\",",
      "\tsymbolLayers: [{",
      "\t\ttype: \"icon\",",
      "\t\tresource: { primitive: \"${1|circle,square,cross,x,kite,triangle|}\"},",
      "\t\tmaterial: { color: ${2:[255, 250, 239, 0.8]} },",
      "\t\tsize: ${3:20}",
      "\t}]",
      "}"
    ],
    "description": "Generate PointSymbol3D with a IconSymbol3DLayer in a SceneView. Available shapes: circle, square, cross, x, kite, and triangle. This snippet is usually used to set the property \"symbol\" of renderers or individual graphics.",
    "prefix": "pointSymbol3dIconProps"
  },
  "Render polygons as animated water surfaces": {
    "body": [
      "{",
      "\ttype: \"polygon-3d\",",
      "\tsymbolLayers: [{",
      "\t\ttype: \"water\",",
      "\t\twaveDirection: 180,",
      "\t\tcolor: \"#5975a3\",",
      "\t\twaveStrength: \"${1|calm,rippled,slight,moderate|}\",",
      "\t\twaterbodySize: \"${2|small,medium,large|}\"",
      "\t}]",
      "}"
    ],
    "description": "WaterSymbol3DLayer is used to render Polygon geometries as realistic, animated water surfaces, therefore it can only be used inside a PolygonSymbol3D. This snippet is usually used to set the property \"symbol\" of renderers or individual graphics.",
    "prefix": "waterSymbol3dLayerProps"
  },
  "Render polygons by extruding them": {
    "body": [
      "{",
      "\ttype: \"polygon-3d\",",
      "\tsymbolLayers: [{",
      "\t\ttype: \"extrude\",",
      "\t\tmaterial: { color: ${1:[255, 250, 239, 0.8]} },",
      "\t\tsize: ${2:20}",
      "\t}]",
      "}"
    ],
    "description": "Generate PolygonSymbol3D with a ExtrudeSymbol3DLayer to be used in a SceneView.  It render polygon geometries by extruding them upward from the ground, creating a 3D volumetric object. This snippet is usually used to set the property \"symbol\" of renderers or individual graphics.",
    "prefix": [
      "polygonSymbol3DExtrudeProps",
      "extrudePolygon3d"
    ]
  },
  "Render polylines by extruding 2D profile": {
    "body": [
      "{",
      "\ttype: \"line-3d\",",
      "\tsymbolLayers: [{",
      "\t\ttype: \"path\",",
      "\t\tprofile: \"${1|circle,quad|}\",",
      "\t\tmaterial: { color: ${2:[255, 250, 239, 0.8]} },",
      "\t\twidth: ${3:15},",
      "\t\theight: ${3:15},",
      "\t\tjoin: \"${4|miter,bevel,round|}\",",
      "\t\tcap: \"${5|butt,square,round,none|}\",",
      "\t\tanchor: \"${6|bottom,center|}\",",
      "\t\tprofileRotation: \"${7|all,heading|}\"",
      "\t}]",
      "}"
    ],
    "description": "Generate LineSymbol3D with a PathSymbol3DLayer. Renders Polyline geometries by extruding a 2D profile along the line. This snippet is usually used to set the property \"symbol\" of renderers or individual graphics.",
    "prefix": [
      "lineSymbol3DPathProps",
      "path3d"
    ]
  },
  "Render polylines using a flat 3D line": {
    "body": [
      "{",
      "\ttype: \"line-3d\",",
      "\tsymbolLayers: [{",
      "\t\ttype: \"line\",",
      "\t\tmaterial: { color: ${1:[255, 250, 239, 0.8]} },",
      "\t\tsize: ${2:15}",
      "\t}]",
      "}"
    ],
    "description": "Generate LineSymbol3D with a LineSymbol3DLayer in a SceneView. This snippet is usually used to set the property \"symbol\" of renderers or individual graphics",
    "prefix": [
      "lineSymbol3DProps"
    ]
  },
  "Set color of features based on a numeric value": {
    "body": [
      "{",
      "\tfield: \"${1:POP_POVERTY}\",",
      "\tlegendOptions: {",
      "\t\ttitle: \"${3:% population in poverty by county}\"",
      "\t},",
      "\tnormalizationField: \"${2:POP_TOT}\",",
      "\tstops: [",
      "\t\t{ value: ${4:0.15}, color: ${5: \"#FFFCD4\" }, label: \"${6:<15%}\" },",
      "\t\t{ value: ${7:0.25}, color: ${8: \"#0D2644\" }, label: \"${9:>25%}\" }",
      "\t],",
      "\ttype: \"color\"",
      "}"
    ],
    "description": "Generate a ColorVariable with 2 color stops. Used to visualize features along a continuous color ramp based on the values of a numeric attribute field or an expression. This snippet is usually used to set the property \"visualVariables[]\" of a renderer class.",
    "prefix": [
      "colorVarProps"
    ]
  },
  "Set environment for a scene background": {
    "body": [
      "{",
      "\tbackground: {",
      "\t\ttype: \"color\",",
      "\t\tcolor: ${1:[0, 0, 0, 0]}",
      "\t},",
      "\tstarsEnabled: false,",
      "\tatmosphereEnabled: false",
      "}"
    ],
    "description": "Creates an environment object for changing the background of a scene. This snippet is usually used to set the property \"environment\" of the SceneView.",
    "prefix": [
      "sceneViewEnvironmentProps",
      "background"
    ]
  },
  "Set size of features based on a numeric value": {
    "body": [
      "{",
      "\ttype: \"size\",",
      "\tfield: \"${1:POP_POVERTY}\",",
      "\tnormalizationField: \"${2:POP_TOT}\",",
      "\taxis: \"height\",",
      "\tlegendOptions: {",
      "\t\ttitle: \"${3:% population in poverty by county}\"",
      "\t},",
      "\tstops: [",
      "\t\t{ value: ${4:0.15}, size: ${5:4}, label: \"${6:<15%}\" },",
      "\t\t{ value: ${7:0.25}, size: ${8:12}, label: \"${9:25%}\" }",
      "\t]",
      "}"
    ],
    "description": "Set size of features based on a numeric value. Creates a SizeVariable with 2 size stops. The axis property is only used in 3D. This snippet is usually used to set the property \"visualVariables[]\" of a renderer.",
    "prefix": [
      "sizeVisualVariableProps",
      "sizeVar"
    ]
  },
  "Styles with API keys": {
    "body": [
      "\"${1|arcgis-imagery,arcgis-imagery-standard,arcgis-imagery-labels,arcgis-light-gray,arcgis-dark-gray,arcgis-navigation,arcgis-navigation-night,arcgis-streets,arcgis-streets-night,arcgis-streets-relief,arcgis-topographic,arcgis-oceans,osm-standard,osm-standard-relief,osm-streets,osm-streets-relief,osm-light-gray,osm-dark-gray,arcgis-terrain,arcgis-community,arcgis-charted-territory,arcgis-colored-pencil,arcgis-nova,arcgis-modern-antique,arcgis-midcentury,arcgis-newspaper,arcgis-hillshade-light,arcgis-hillshade-dark|}\""
    ],
    "description": "Use of these basemaps requires a valid ArcGIS Online organizational subscription or an ArcGIS Enterprise license.",
    "prefix": [
      "basemapsWithAPIKeys"
    ]
  },
  "Styles without API keys": {
    "body": [
      "\"${1|satellite,hybrid,oceans,osm,terrain,dark-gray-vector,gray-vector,streets-vector,streets-night-vector,streets-navigation-vector,topo-vector,streets-relief-vector|}\""
    ],
    "description": "List all available map styles to be used without API keys. Use of these basemaps requires an ArcGIS Developer subscription or a valid ArcGIS Online organizational subscription.",
    "prefix": [
      "basemapStyle",
      "basemapsWithoutAPIKeys"
    ]
  },
  "Symbolize using categorical values": {
    "body": [
      "{",
      "\ttype: \"unique-value\",",
      "\tfield: \"${1:REGION}\",",
      "\tdefaultSymbol: ${2:symbol},",
      "\tuniqueValueInfos: [{",
      "\t\tvalue: \"${3:value}\",",
      "\t\tsymbol: ${4:symbol},",
      "\t\tlabel: \"${5:label for the legend}\"",
      "\t}]",
      "}"
    ],
    "description": "Generate a unique value renderer. This snippet is usually used to set the property \"renderer\" of a FeatureLayer, SceneLayer, MapImageLayer, CSVLayer, GeoJSONLayer, OGCFeatureLayer, WFSLayer, StreamLayer, ImageryLayer, or ImageryTileLayer",
    "prefix": [
      "uniqueValueRendererProps"
    ]
  },
  "Symbols based on classes or ranges": {
    "body": [
      "{",
      "\tclassBreakInfos: [{",
      "\t\tlabel: \"${1:label for the legend}\",",
      "\t\tmaxValue: ${2:10},",
      "\t\tminValue: ${3:0},",
      "\t\tsymbol: ${4:symbol}",
      "\t}],",
      "\tdefaultSymbol: ${5:symbol},",
      "\tfield: \"${6:MAGNITUDE}\",",
      "\ttype: \"class-breaks\",",
      "}"
    ],
    "description": "Generate a ClassBreaksRenderer. This snippet is usually used to set the property \"renderer\" of a FeatureLayer, SceneLayer, MapImageLayer, CSVLayer, GeoJSONLayer, OGCFeatureLayer, WFSLayer, StreamLayer, ImageryLayer, or ImageryTileLayer.",
    "prefix": [
      "classBreaksRendererProps"
    ]
  },
  "World scale 3D callout": {
    "body": [
      "callout: {",
      "\tborder: {",
      "\t\tcolor: ${1:[0, 0, 0, 0.5]},",
      "\t},",
      "\tcolor: ${2:[255, 255, 255, 0.9]},",
      "\tsize: ${3:1.5},",
      "\ttype: \"line\",",
      "},",
      "verticalOffset: {",
      "\tmaxWorldLength: 500000,",
      "\tminWorldLength: 0,",
      "\tscreenLength: 40,",
      "}"
    ],
    "description": "Generates a Callout3D with a verticalOffset for a world scale level and the callout property. They should be set on the property \"callout\" of PointSymbol3D or LabelSymbol3D.",
    "prefix": [
      "callout3DLargeProps"
    ]
  },
  "Add CSV Layer": {
    "body": [
      "new CSVLayer({",
      "\turl: \"${1:https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/2.5_week.csv}\",",
      "\tcopyright: \"${2:USGS Earthquakes}\"",
      "})"
    ],
    "description": "Add a CSVLayer (point layer) based on a CSV file (.csv, .txt) with a URL. CSV is a plain-text file format used to represent tabular data, including geographic point features (latitude, longitude). AMD path: esri/layers/CSVLayer | ESM path: @arcgis/core/layers/CSVLayer.js",
    "prefix": "CSVLayer"
  },
  "Add CSV Layer from Blob": {
    "body": [
      "new CSVLayer({",
      "\turl: ${2:url}",
      "});"
    ],
    "description": "Add a CSVLayer (point layer) based on a CSV file (.csv, .txt) from in-memory CSV data by passing a Blob object. AMD path: esri/layers/CSVLayer | ESM path: @arcgis/core/layers/CSVLayer.js",
    "prefix": "CSVLayerFromBlob"
  },
  "Add GeoJSONLayer with URL": {
    "body": [
      "new GeoJSONLayer({",
      "\turl: \"${1:https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_month.geojson}\",",
      "\tcopyright: \"${2:USGS Earthquakes}\"",
      "});"
    ],
    "description": "Add GeoJSONLayer based on GeoJSON data with a URL. GeoJSON is a format for encoding a variety of geographic data structures. AMD path: esri/layers/GeoJSONLayer | ESM path: @arcgis/core/layers/GeoJSONLayer.js",
    "prefix": "GeoJSONLayer"
  },
  "Create GeoRSSLayer with URL": {
    "body": [
      "new GeoRSSLayer({",
      "\turl: \"${1:https://arcgis.github.io/arcgis-samples-javascript/sample-data/layers-georss/sample-georss.xml}\"",
      "});"
    ],
    "description": "Add GeoRSSLayer based on a GeoRSS file with a URL. GeoRSS is a format of adding geographic information to an RSS feed. The layer supports both GeoRSS-Simple and GeoRSS GML. AMD path: esri/layers/GeoRSSLayer | ESM path: @arcgis/core/layers/GeoRSSLayer.js",
    "prefix": "GeoRSSLayer"
  },
  "Add Graphics to GraphicsLayer": {
    "body": [
      "new Graphic({",
      "\tgeometry: ${1:Point, Polyline, Polygon,}",
      "\tsymbol: ${2:simpleMarkerSymbol,simpleLineSymbol,simpleFillSymbol,}",
      "});"
    ],
    "description": "Create a Graphic to add to a GraphicsLayer via the add() method directly to the Graphics property. A GraphicsLayer contains one or more client-side Graphics. AMD path: esri/layers/GraphicsLayer | ESM path: @arcgis/core/layers/GraphicsLayer.js",
    "prefix": "GraphicsLayer"
  },
  "Create FeatureLayer with PortalItem": {
    "body": [
      "new FeatureLayer({",
      "\tportalItem: {",
      "\t\tid: \"${1:123f4410054b43d7a0bacc1533ceb8dc}\"",
      "\t}",
      "});"
    ],
    "description": "Create a FeatureLayer using an ArcGIS Enterprise PortalItem ID. A FeatureLayer can be either a spatial (has geographic features) or non-spatial (table). AMD path: esri/layers/FeatureLayer | ESM path: @arcgis/core/layers/FeatureLayer.js",
    "prefix": "FeatureLayerWithPortalItem"
  },
  "Create FeatureLayer with Client-Side Graphics": {
    "body": [
      "new FeatureLayer({",
      "\tfields: [",
      "\t\t{",
      "\t\t\tname: \"${1:ObjectID}\",",
      "\t\t\talias: \"${2:ObjectID}\",",
      "\t\t\ttype: \"${3:oid}\"",
      "\t\t},",
      "\t\t{",
      "\t\t\tname: \"${4:type}\",",
      "\t\t\talias: \"${5:Type}\",",
      "\t\t\ttype: \"${6:string}\"",
      "\t\t},",
      "\t\t{",
      "\t\t\tname: \"${7:recordedDate}\",",
      "\t\t\talias: \"${8:recordedDate}\",",
      "\t\t\ttype: \"${9:date}\"",
      "\t\t}",
      "\t],",
      "\tdateFieldsTimeZone: \"${10:America/New_York}\",",
      "\tobjectIdField: \"${11:ObjectID}\",",
      "\tgeometryType: \"${12:point}\",",
      "\tspatialReference: { wkid: ${13:4326} },",
      "\tsource: graphics,",
      "\trenderer: uvRenderer",
      "});"
    ],
    "description": "Add a FeatureLayer with Client-Side Graphics. If working with spatial layers, the geometry type of the features must be indicated.  Both spatial and non-spatial feature collections require an objectId field.  AMD path: esri/layers/FeatureLayer | ESM path: @arcgis/core/layers/FeatureLayer.js",
    "prefix": "FeatureLayerwithClientSideGraphics"
  },
  "Add MapNotes Layer": {
    "body": [
      "new MapNotesLayer({",
      "\ttitle: \"${1:My Map Notes}\"",
      "});"
    ],
    "description": "Add a MapNotesLayer. The MapNotesLayer lets you display and modify map notes (features sketched on a web map) from the Map Viewer. AMD path: esri/layers/MapNotesLayer | ESM path: @arcgis/core/layers/MapNotesLayer.js",
    "prefix": "MapNotesLayer"
  },
  "Add OGC Feature Layer": {
    "body": [
      "new OGCFeatureLayer({",
      "\turl: \"${1:https://vtp2.geo-solutions.it/geoserver/ogc/features}\",",
      "\tcollectionId: \"${2:ne:countries50m}\"",
      "});"
    ],
    "description": "Add an OGCFeatureLayer with URL and collection ID. OGCFeatureLayer only supports collection items encoded in GeoJSON. AMD path: esri/layers/OGCFeatureLayer | ESM path: @arcgis/core/layers/OGCFeatureLayer.js",
    "prefix": "OGCFeatureLayer"
  },
  "Add RouteLayer": {
    "body": [
      "new RouteLayer({",
      "\tstops: [",
      "\t\t{ geometry: { x: ${1:-117.1825}, y: ${2:34.054722} } },",
      "\t\t{ geometry: { x: ${3:-116.545278}, y: ${4:33.830278} } }",
      "\t],",
      "\tpointBarriers: [",
      "\t\t{ geometry: { x: ${5:-117.2}, y: ${6:34.05} } }",
      "\t],",
      "\tpolylineBarriers: [",
      "\t\t{ geometry: { paths: [[[${7:-117.3}, ${8:34.05}], [${9:-117.5}, ${10:34.1}]]] } }",
      "\t],",
      "\tpolygonBarriers: [",
      "\t\t{ geometry: { rings: [[[${11:-117.3}, ${12:34.05}], [${13:-117.5}, ${14:34.1}], [${15:-117.4}, ${16:34.2}], [${11}, ${12}]]] } }",
      "\t]",
      "});"
    ],
    "description": "Add a RouteLayer and visualize the route using stops, point, polygon and polyline barriers. The results of a solved route include overall travel time, distance, and turn-by-turn directions. AMD path: esri/layers/RouteLayer | ESM path: @arcgis/core/layers/RouteLayer.js",
    "prefix": "RouteLayer"
  },
  "Add Stream Layer with a URL": {
    "body": [
      "new StreamLayer({",
      "\turl: \"${1:https://geoeventsample1.esri.com:6443/arcgis/rest/services/LABus/StreamServer}\",",
      "\tpurgeOptions: {",
      "\t\tdisplayCount: ${2:10000}",
      "\t},",
      "\tmaxReconnectionAttempts: ${3:100},",
      "\tmaxReconnectionInterval: ${4:10},",
      "\trenderer: ${5:renderer}",
      "});"
    ],
    "description": "Add a StreamLayer with a URL. A StreamLayer displays the observation streams, including changes to location, attributes, or both, associated with a set of tracked objects in real-time. AMD path: esri/layers/StreamLayer | ESM path: @arcgis/core/layers/StreamLayer.js",
    "prefix": "StreamLayer"
  },
  "Add Stream Layer with WebSocketURL": {
    "body": [
      "new StreamLayer({",
      "\twebSocketUrl: \"${1:ws://localhost:8000}\",",
      "\tfields: [",
      "\t\t{",
      "\t\t\tname: \"OBJECTID\",",
      "\t\t\talias: \"ObjectId\",",
      "\t\t\ttype: \"oid\"",
      "\t\t},",
      "\t\t{",
      "\t\t\tname: \"TRACKID\",",
      "\t\t\talias: \"TrackId\",",
      "\t\t\ttype: \"long\"",
      "\t\t}",
      "\t],",
      "\ttimeInfo: {",
      "\t\ttrackIdField: \"TRACKID\"",
      "\t},",
      "\tgeometryType: \"point\",",
      "\tmaxReconnectionAttempts: ${2:100},",
      "\tmaxReconnectionInterval: ${3:10},",
      "\trenderer: ${4:renderer}",
      "});"
    ],
    "description": "Add a StreamLayer by referencing a custom stream service. The geometryType property is used to set the features' geometry type. AMD path: esri/layers/StreamLayer | ESM path: @arcgis/core/layers/StreamLayer.js",
    "prefix": "StreamLayerwithWebSocketURL"
  },
  "Add Vector Tile Layer": {
    "body": [
      "new VectorTileLayer({",
      "\turl: \"${1:https://www.arcgis.com/sharing/rest/content/items/4cf7e1fb9f254dcda9c8fbadb15cf0f8/resources/styles/root.json}\"",
      "});"
    ],
    "description": "Add a VectorTileLayer with a URL. VectorTileLayer accesses cached tiles of data and renders it in vector format. AMD path: esri/layers/VectorTileLayer | ESM path: @arcgis/core/layers/VectorTileLayer.js",
    "prefix": "VectorTileLayer"
  },
  "Add WFS Layer": {
    "body": [
      "new WFSLayer({",
      "\turl: \"${2:https://geobretagne.fr/geoserver/ows}\",",
      "\tname: \"${3:fma:bvme_zhp_vs_culture}\"",
      "});"
    ],
    "description": "Add a WFSLayer based on an OGC Web Feature Service (WFS) with a URL. AMD path: esri/layers/WFSLayer | ESM path: @arcgis/core/layers/WFSLayer.js",
    "prefix": "WFSLayer"
  },
  "Add Imagery Layer": {
    "body": [
      "new ImageryLayer({",
      "\turl: ${1:serviceUrl}",
      "});"
    ],
    "description": "Add an ImageryLayer with a service URL. An ImageryLayer retrieves and displays data from dynamic image services. AMD path: esri/layers/ImageryLayer | ESM path: @arcgis/core/layers/ImageryLayer.js",
    "prefix": "ImageryLayer"
  },
  "Add Imagery Tile Layer with COG": {
    "body": [
      "new ImageryTileLayerCOG({",
      "\turl: \"${1:https://ss6imagery.arcgisonline.com/imagery_sample/landsat8/Bolivia_LC08_L1TP_001069_20190719_MS.tiff}\",",
      "\tbandIds: [${2:3}, ${3:2}, ${4:1}]",
      "});"
    ],
    "description": "Create an ImageryTileLayer that references a Cloud Optimized GeoTiff(COG) file. A Cloud Optimized GeoTiff (COG) file is a regular GeoTiff file that is hosted on CORS enabled HTTPS server. AMD path: esri/layers/ImageryLayer | ESM path: @arcgis/core/layers/ImageryLayer.js",
    "prefix": "ImageryTileLayerwithCOG"
  },
  "Create a Transposed Multidimensional Imagery Tile Layer": {
    "body": [
      "new MultidimensionalImageryTileLayer({",
      "\turl: \"${1:https://tiledimageservices.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/NLDAS2011_daily_wind_magdir/ImageServer}\",",
      "\ttitle: \"${2:2011 wind - 10 meters above surface}\",",
      "\trenderer: {",
      "\t\ttype: \"vector-field\",",
      "\t\tstyle: \"${3:beaufort-m}\",",
      "\t\tflowRepresentation: \"${4:flow-to}\",",
      "\t\tsymbolTileSize: ${5:30},",
      "\t\tvisualVariables: [",
      "\t\t\t{",
      "\t\t\t\ttype: \"size\",",
      "\t\t\t\tfield: \"${6:Magnitude}\",",
      "\t\t\t\tmaxDataValue: ${7:32},",
      "\t\t\t\tmaxSize: \"${8:60px}\",",
      "\t\t\t\tminDataValue: ${9:0.04},",
      "\t\t\t\tminSize: \"${10:20px}\"",
      "\t\t\t},",
      "\t\t\t{",
      "\t\t\t\ttype: \"rotation\",",
      "\t\t\t\tfield: \"${11:Direction}\",",
      "\t\t\t\trotationType: \"${12:geographic}\"",
      "\t\t\t}",
      "\t\t]",
      "\t}",
      "});"
    ],
    "description": "Create a Transposed Multidimensional Imagery Tile Layer. Transposed Multidimensional Imagery Tile Layers are created for optimizing performance when accessing pixel values across all multidimensional slices rather than for visualization at different map scales. AMD path: esri/layers/ImageryLayer | ESM path: @arcgis/core/layers/ImageryLayer.js",
    "prefix": "TransposedMultidimensionalImageryTileLayer"
  },
  "Add WebTileLayer": {
    "body": [
      "new WebTileLayer({",
      "\turlTemplate: \"${1:https://{subDomain}.tile.opentopomap.org/{level}/{col}/{row}.png}\",",
      "\tsubDomains: [\"${2:a}\", \"${3:b}\", \"${4:c}\"],",
      "\tcopyright: \"${5:https://www.openstreetmap.org/copyright}\" ",
      "});"
    ],
    "description": "Create a WebTileLayer with a service URL. WebTileLayer provides a simple way to add non-ArcGIS Server map tiles as a layer to a map. The constructor takes a URL template that usually follows a pattern of http://some.domain.com/{level}/{col}/{row}/ where level corresponds to a zoom level, and column and row represent tile column and row, respectively. AMD path: esri/layers/WebTileLayer | ESM path: @arcgis/core/layers/WebTileLayer.js",
    "prefix": "WebTileLayer"
  },
  "Add WMS Layer": {
    "body": [
      "new WMSLayer({",
      "\turl: \"${1:service url}\"",
      "});",
      "await wmsLayer.load();"
    ],
    "description": "Add a WMSLayer based on OGC Web Map Services (WMS) with a URL.  AMD path: esri/layers/WMSLayer | ESM path: @arcgis/core/layers/WMSLayer.js",
    "prefix": "WMSLayer"
  },
  "Add WMTS Layer": {
    "body": [
      "new WMTSLayer({",
      "\turl: \"${1:https://gibs.earthdata.nasa.gov/wmts/epsg4326/best}\",",
      "\tactiveLayer: {",
      "\t\tid: \"${2:SRTM_Color_Index}\"",
      "\t}",
      "});"
    ],
    "description": "Add a WMTSLayer based on OGC Web Map Tile Services (WMTS) with URL. The WMTS service acts as a directory of WMTS layers and you can set a specific layer using the activeLayer property. AMD path: esri/layers/WMTSLayer | ESM path: @arcgis/core/layers/WMTSLayer.js",
    "prefix": "WMTSLayer"
  },
  "Add WCS Layer": {
    "body": [
      "new WCSLayer({",
      "\turl: \"${1:https://sampleserver6.arcgisonline.com/arcgis/services/ScientificData/SeaTemperature/ImageServer/WCSServer}\",",
      "\trenderer: ${2:renderer},",
      "\tmultidimensionalDefinition: ${3:multidimensionalDefinition},",
      "\tversion: \"${4:2.0.1}\",",
      "\topacity: ${5:0.5}",
      "});"
    ],
    "description": "Add a WCSLayer with URL. WCS presents raster data from a OGC Web Coverage Service. Raster data is projected and rendered on the client-side. AMD path: esri/layers/WCSLayer | ESM path: @arcgis/core/layers/WCSLayer.js",
    "prefix": "WCSLayer"
  },
  "Add Traffic Time-based Map Image Layer": {
    "body": [
      "new MapImageLayer({",
      "\turl: \"${1:https://traffic.arcgis.com/arcgis/rest/services/World/Traffic/MapServer}\",",
      "\tdpi: ${2:48},",
      "\timageFormat: \"${3:png32}\",",
      "\trefreshInterval: ${4:3},",
      "\tuseViewTime: ${5:false}",
      "});"
    ],
    "description": "Add a MapImageLayer within a specified time extent with URL. MapImageLayer allows you to display and analyze data from sublayers defined in a map service, exporting images instead of features. AMD path: esri/layers/MapImageLayer | ESM path: @arcgis/core/layers/MapImageLayer.js",
    "prefix": "MapImageLayer"
  },
  "OpenStreetMapLayer": {
    "body": [
      "new OpenStreetMapLayer();"
    ],
    "description": "Add an OpenStreetMapLayer to the map. OpenStreetMapLayer allows the use basemaps from OpenStreetMap. AMD path: esri/layers/OpenStreetMapLayer | ESM path: @arcgis/core/layers/OpenStreetMapLayer.js",
    "prefix": "OpenStreetMapLayer"
  },
  "Add Bing Maps Layer": {
    "body": [
      "new BingMapsLayer({",
      "\tstyle: \"${1:Aerial, Road, Hybrid}\",",
      "\tkey: \"${2:Bing maps key}\"",
      "});"
    ],
    "description": "Add a BingMapsLayer with Bing Maps Key. BingMapsLayer supports Microsoft's Bing tiled map content and the map styles supported are Road, Aerial and Hybrid. AMD path: esri/layers/BingMapsLayer | ESM path: @arcgis/core/layers/BingMapsLayer.js",
    "prefix": "BingMapsLayer"
  },
  "Filter a Scene Layer with SQL expressions": {
    "body": [
      "new SceneLayer({",
      "\turl: \"${1:https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/Paris_3D_Local_WSL2/SceneServer/layers/0}\",",
      "\tdefinitionExpression: \"${2:SQL Expression}\"",
      "});"
    ],
    "description": "Add a Scene Layer with URL that can be filtered using an SQL where clause.  SceneLayer is designed for on-demand streaming and displaying large amounts of data in a SceneView. It supports two geoometry types: Point and 3D Objects (e.g. Buildings). AMD path: esri/layers/SceneLayer | ESM path: @arcgis/core/layers/SceneLayer.js",
    "prefix": "SceneLayer"
  },
  "Add Elevation Layer": {
    "body": [
      "new ElevationLayer({",
      "\turl: ${1:\"https://sampleserver6.arcgisonline.com/arcgis/rest/services/Elevation/MtBaldy_Elevation/ImageServer\"}",
      "});"
    ],
    "description": "Add an Elevation Layer with URL. ElevationLayer is a tile layer used for rendering elevations in SceneViews. AMD path: esri/layers/ElevationLayer | ESM path: @arcgis/core/layers/ElevationLayer.js",
    "prefix": "ElevationLayer"
  },
  "AddPointCloudLayerRenderer": {
    "body": [
      "new PointCloudLayer({",
      "\turl: \"${1:https://tiles.arcgis.com/tiles/V6ZHFr6zdgNZuVG0/arcgis/rest/services/BARNEGAT_BAY_LiDAR_UTM/SceneServer}\"",
      "});"
    ],
    "description": "Add a PointCloudLayer with a URL. The PointCloudLayer is designed for visualizing large collections of point cloud data, post-processed spatially organized lidar data that consists of large collections of 3D points, in a SceneView. AMD path: esri/layers/PointCloudLayer | ESM path: @arcgis/core/layers/PointCloudLayer.js",
    "prefix": "PointCloudLayer"
  },
  "Add Building Scene Layer": {
    "body": [
      "new BuildingSceneLayer({",
      "\turl: \"${1:https://tiles.arcgis.com/tiles/V6ZHFr6zdgNZuVG0/arcgis/rest/services/Esri_Admin_Building/SceneServer}\",",
      "\ttitle: \"${2:Administration Building, Redlands - Building Scene Layer}\"",
      "});"
    ],
    "description": "Add a BuildingSceneLayer with URL. BuildingSceneLayer is designed for visualizing complex digital models of buildings and interacting with all the components of the building. AMD path: esri/layers/BuildingSceneLayer | ESM path: @arcgis/core/layers/BuildingSceneLayer.js",
    "prefix": "BuildingSceneLayer"
  },
  "Add Line Of Sight Layer": {
    "body": [
      "new LineOfSightLayer({",
      "\tobserver: { position: ${1:somePoint}},",
      "\ttargets: [",
      "\t\t{position: ${2:someOtherPoint}}",
      "\t]",
      "});"
    ],
    "description": "Add a LineOfSightLayer visualized in a 3D SceneView. LineOfSightLayer computes the line of sight from a single observer position towards a set of targets. AMD path: esri/layers/LineOfSightLayer | ESM path: @arcgis/core/layers/LineOfSightLayer.js",
    "prefix": "LineOfSightLayer"
  },
  "Add Dimension Layer": {
    "body": [
      "new DimensionLayer({",
      "\tsource: {",
      "\t\tdimensions: [",
      "\t\t\t{",
      "\t\t\t\tstartPoint: {",
      "\t\t\t\t\tspatialReference: { wkid: 102100 },",
      "\t\t\t\t\tx: ${1:rings[i][0]},",
      "\t\t\t\t\ty: ${2:rings[i][1]},",
      "\t\t\t\t\tz: ${3:feature.attributes[\"Elevation\"] + feature.attributes[\"FloorHeight\"]}",
      "\t\t\t\t},",
      "\t\t\t\tendPoint: {",
      "\t\t\t\t\tspatialReference: { wkid: 102100 },",
      "\t\t\t\t\tx: ${4:rings[i + 1][0]},",
      "\t\t\t\t\ty: ${5:rings[i + 1][1]},",
      "\t\t\t\t\tz: ${6:feature.attributes[\"Elevation\"] + feature.attributes[\"FloorHeight\"]}",
      "\t\t\t\t}",
      "\t\t\t}",
      "\t\t]",
      "\t},",
      "\tstyle: {",
      "\t\tcolor: \"${7:white}\"",
      "\t}",
      "});"
    ],
    "description": "Add a Dimension Layer using a DimensionAnalysis Object. A Dimension layer displays measurement annotations of lengths and distances in a 3D SceneView. AMD path: esri/layers/DimensionLayer| ESM path: @arcgis/core/layers/DimensionLayer.js",
    "prefix": "DimensionLayer"
  },
  "Add Integrated Mesh Layer": {
    "body": [
      "new IntegratedMeshLayer({",
      "\turl: ${1:\"https://tiles.arcgis.com/tiles/u0sSNqDXr7puKJrF/arcgis/rest/services/Frankfurt2017_v17/SceneServer/layers/0\"}",
      "});"
    ],
    "description": "Add an Integrated Mesh Layer with a URL. The IntegratedMeshLayer is designed for visualizing accurate representations of built and natural environments, captured by an automated process for constructing 3D objects from large sets of overlapping imagery, in a SceneView. AMD path: esri/layers/IntegratedMeshLayer | ESM path: @arcgis/core/layers/IntegratedMeshLayer.js",
    "prefix": "IntegratedMeshLayer"
  },
  "Add Voxel Layer": {
    "body": [
      "new VoxelLayer({",
      "\turl: \"${1:https://tiles.arcgis.com/tiles/z2tnIkrLQ2BRzr6P/arcgis/rest/services/EMU_Caribbean_Voxel/SceneServer}\"",
      "});"
    ],
    "description": "Add a Voxel Layer with a URL. A voxel layer represents multidimensional volumetric data such as atmospheric or oceanic data, geological underground models, or space-time cubes. The layer is used to explore spatial relationships with other content. AMD path: esri/layers/VoxelLayer| ESM path: @arcgis/core/layers/VoxelLayer.js",
    "prefix": "VoxelLayer"
  },
  "Add Media Layer with Video": {
    "body": [
      "new MediaLayer({",
      "\tsource: [",
      "\t\t{",
      "\t\t\tvideo: \"${1:https://arcgis.github.io/arcgis-samples-javascript/sample-data/media-layer/videos/hurricanes_aerosol-aug.mp4}\",",
      "\t\t\tgeoreference: {",
      "\t\t\t\textent: {",
      "\t\t\t\t\txmin: ${2:-150},",
      "\t\t\t\t\tymin: ${3:1},",
      "\t\t\t\t\txmax: ${4:20},",
      "\t\t\t\t\tymax: ${5:80},",
      "\t\t\t\t\tspatialReference: {",
      "\t\t\t\t\t\twkid: ${6:4326}",
      "\t\t\t\t\t}",
      "\t\t\t\t}",
      "\t\t\t}",
      "\t\t}",
      "\t],",
      "\ttitle: \"${7:2017 Hurricanes and Aerosols Simulation}\",",
      "\tcopyright: \"${8:NASA's Goddard Space Flight Center}\"",
      "});"
    ],
    "description": "Add a Media Layer with a video element in a 3D SceneView. MediaLayer is used to display static images and videos on the map by specifying their geographic locations using extent and rotation or the corner points of the bounding box. AMD path: esri/layers/MediaLayer| ESM path: @arcgis/core/layers/MediaLayer.js",
    "prefix": "MediaLayerVideo"
  },
  "Add MediaLayer with Control Points Georeference": {
    "body": [
      "new MediaLayer({",
      "\tsource: [",
      "\t\t{",
      "\t\t\timage: \"https://arcgis.github.io/arcgis-samples-javascript/sample-data/media-layer/telluride/TellurideQuad.webp\",",
      "\t\t\tgeoreference: {",
      "\t\t\t\tcontrolPoints: [",
      "\t\t\t\t\t{",
      "\t\t\t\t\t\tsourcePoint: { x: 89, y: 1918 },",
      "\t\t\t\t\t\tmapPoint: new Point({ x: -107.875, y: 37.875, spatialReference })",
      "\t\t\t\t\t},",
      "\t\t\t\t\t{",
      "\t\t\t\t\t\tsourcePoint: { x: 83, y: 101 },",
      "\t\t\t\t\t\tmapPoint: new Point({ x: -107.875, y: 38, spatialReference })",
      "\t\t\t\t\t},",
      "\t\t\t\t\t{",
      "\t\t\t\t\t\tsourcePoint: { x: 1508, y: 97 },",
      "\t\t\t\t\t\tmapPoint: new Point({ x: -107.75, y: 38, spatialReference })",
      "\t\t\t\t\t},",
      "\t\t\t\t\t{",
      "\t\t\t\t\t\tsourcePoint: { x: 1517, y: 1906 },",
      "\t\t\t\t\t\tmapPoint: new Point({ x: -107.75, y: 37.875, spatialReference })",
      "\t\t\t\t\t}",
      "\t\t\t\t],",
      "\t\t\t\twidth: 1585,",
      "\t\t\t\theight: 2048",
      "\t\t\t}",
      "\t\t}",
      "\t],",
      "\ttitle: \"Geologic Map of the Telluride Quadrangle, Southwestern Colorado\",",
      "\tcopyright: \"Wilbur S Burbank and Robert G. Luedke, 1966\",",
      "\tspatialReference",
      "});"
    ],
    "description": "Add a MediaLayer with Control Points Georeference. A control point has a sourcePoint, a point on the element measured in pixels from the top left corner, and a mapPoint, a known geographic location. This allows us to position the images in map space. AMD path: esri/layers/MediaLayer| ESM path: @arcgis/core/layers/MediaLayer.js",
    "prefix": "MediaLayerControlPoints"
  },
  "Add KML Layer": {
    "body": [
      "new KMLLayer({",
      "\turl: \"http://quickmap.dot.ca.gov/data/lcs.kml\"",
      "});"
    ],
    "description": "Add a KML layer based on a KML file (.kml, .kmz) with a URL. KML is an XML-based file format used to represent geographic features. AMD path: esri/layers/KMLLayer| ESM path: @arcgis/core/layers/KMLLayer.js",
    "prefix": "KMLLayer"
  },
  "Add GroupLayer": {
    "body": [
      "new GroupLayer({",
      "\tlayers: [",
      "\t\t{",
      "\t\t\turl: \"https://example.com/featureLayer\"",
      "\t\t},",
      "\t\t{",
      "\t\t\turl: \"https://example.com/tileLayer\"",
      "\t\t}",
      "\t],",
      "\ttitle: \"My Group Layer\",",
      "\topacity: 0.8",
      "});"
    ],
    "description": "Add a Group Layer with feature and/or tile layer URLs. GroupLayer provides the ability to organize several sublayers into one common layer.  AMD path: esri/layers/GroupLayer| ESM path: @arcgis/core/layers/GroupLayer.js",
    "prefix": "GroupLayer"
  },
  "Add Subtype Group Layer": {
    "body": [
      "new SubtypeGroupLayer({",
      "\turl: ${1: \"https://sampleserver7.arcgisonline.com/server/rest/services/UtilityNetwork/NapervilleElectric/FeatureServer/0\"}",
      "\tsublayers: [",
      "\t\t{",
      "\t\t\tsubtypeCode: 12,",
      "\t\t\tvisible: true,",
      "\t\t\trenderer: simpleRenderer",
      "\t\t},",
      "\t]",
      "};"
    ],
    "description": "Add a Subtype Group Layer with a URL. The SubtypeGroupLayer is a single layer that automatically creates a SubtypeSublayer for each subtype in its corresponding feature service. AMD path: esri/layers/SubtypeGroupLayer | ESM path: @arcgis/core/layers/SubtypeGroupLayer.js",
    "prefix": "SubtypeGroupLayer"
  },
  "Add Imagery Tile Layer with CovergeJSON object": {
    "body": [
      "new ImageryTileLayer({",
      "\tsource: {",
      "\t\ttype: \"Coverage\",",
      "\t\tdomain: {",
      "\t\t\ttype: \"Domain\",",
      "\t\t\tdomainType: \"Grid\",",
      "\t\t\taxes: {",
      "\t\t\t\tx: { values: ${1:[-10, -5, 0]} },",
      "\t\t\t\ty: { values: ${2:[40, 50]} },",
      "\t\t\t\tt: { values: [${3:\"2010-01-01T00:12:20Z\"}] }",
      "\t\t\t},",
      "\t\t\treferencing: [",
      "\t\t\t{",
      "\t\t\t\tcoordinates: [\"x\", \"y\"],",
      "\t\t\t\tsystem: {",
      "\t\t\t\t\ttype: ${4:\"GeographicCRS\"},",
      "\t\t\t\t\tid: ${5:\"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"}",
      "\t\t\t\t}",
      "\t\t\t},",
      "\t\t\t{",
      "\t\t\t\tcoordinates: [\"t\"],",
      "\t\t\t\tsystem: {",
      "\t\t\t\t\ttype: \"TemporalRS\",",
      "\t\t\t\t\tcalendar: \"Gregorian\"",
      "\t\t\t\t}",
      "\t\t\t}",
      "\t\t\t]",
      "\t\t},",
      "\t\tparameters: {",
      "\t\t},",
      "\t\tranges: {",
      "\t\t\tLC: {",
      "\t\t\t\ttype: \"NdArray\",",
      "\t\t\t\tdataType: \"integer\",",
      "\t\t\t\taxisNames: [\"t\", \"y\", \"x\"],",
      "\t\t\t\tshape: [1, 2, 3],",
      "\t\t\t\tvalues: [${6: 1, 1, null, 2, 1, 2}]",
      "\t\t\t}",
      "\t\t}",
      "\t}",
      "});"
    ],
    "description": "Add an Imagery Tile Layer with CovergeJSON object. CoverageJSON is an OGC format for storing data such as grids, time and elevation profiles. ImageryTileLayer presents raster data from a tiled image service. AMD path: esri/layers/ImageryTileLayer| ESM path: @arcgis/core/layers/ImageryTileLayer.js",
    "prefix": [
      "ImageryTileLayerwithCovergeJSON",
      "TileLayer"
    ]
  },
  "Add Knowledge Graph Layer": {
    "body": [
      "new KnowledgeGraphLayer({",
      "\turl: ${1:\"https://sampleserver7.arcgisonline.com/arcgis/rest/services/Hosted/SupplyChain/KnowledgeGraphServer\"}",
      "\tinclusionModeDefinition: {",
      "\t\tgenerateAllSublayers: ${2:false},",
      "\t\tnamedTypeDefinitions: ${3:namedTypes}",
      "\t}",
      "});"
    ],
    "description": "Add a Knowledge Graph Layer with a URL. A KnowledgeGraphLayer is a composite layer that represents a knowledge graph service on a map.  A KnowledgeGraphLayer also optionally takes an inclusion definition that specifies a set of named types and/or specific entities and relationships to be included in the layer. AMD path: esri/layers/KnowledgeGraphLayer| ESM path: @arcgis/core/layers/KnowledgeGraphLayer.js",
    "prefix": "KnowledgeGraphLayer"
  }
}